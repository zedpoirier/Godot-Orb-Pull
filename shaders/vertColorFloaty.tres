[gd_resource type="VisualShader" load_steps=14 format=2]

[sub_resource type="VisualShaderNodeInput" id=1]
input_name = "vertex"

[sub_resource type="VisualShaderNodeTransformVecMult" id=2]

[sub_resource type="VisualShaderNodeInput" id=3]
input_name = "camera"

[sub_resource type="VisualShaderNodeVectorDecompose" id=4]

[sub_resource type="VisualShaderNodeVectorCompose" id=5]
default_input_values = [ 0, 0.0, 1, 1.0, 2, 0.0 ]

[sub_resource type="VisualShaderNodeScalarOp" id=6]
default_input_values = [ 0, 0.0, 1, 0.2 ]
operator = 2

[sub_resource type="VisualShaderNodeInput" id=7]
input_name = "vertex"

[sub_resource type="VisualShaderNodeScalarFunc" id=8]
default_input_values = [ 0, 3.0 ]
function = 0

[sub_resource type="VisualShaderNodeVectorDecompose" id=9]

[sub_resource type="VisualShaderNodeVectorCompose" id=10]

[sub_resource type="VisualShaderNodeScalarOp" id=11]

[sub_resource type="VisualShaderNodeInput" id=12]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarOp" id=13]
operator = 2

[resource]
code = "shader_type spatial;
render_mode specular_schlick_ggx;




void vertex() {
// Input:2
	vec3 n_out2p0 = VERTEX;

// VectorDecompose:5
	float n_out5p0 = n_out2p0.x;
	float n_out5p1 = n_out2p0.y;
	float n_out5p2 = n_out2p0.z;

// Input:8
	float n_out8p0 = TIME;

// ScalarOp:10
	float n_in10p1 = 0.20000;
	float n_out10p0 = n_out8p0 * n_in10p1;

// ScalarOp:9
	float n_out9p0 = n_out5p1 * n_out10p0;

// ScalarFunc:4
	float n_out4p0 = sin(n_out9p0);

// ScalarOp:7
	float n_out7p0 = n_out5p1 + n_out4p0;

// VectorCompose:6
	vec3 n_out6p0 = vec3(n_out5p0, n_out7p0, n_out5p2);

// Output:0
	VERTEX = n_out6p0;

}

void fragment() {
// Input:4
	mat4 n_out4p0 = CAMERA_MATRIX;

// Input:2
	vec3 n_out2p0 = VERTEX;

// TransformVectorMult:3
	vec3 n_out3p0 = (n_out4p0 * vec4(n_out2p0, 1.0)).xyz;

// VectorDecompose:5
	float n_out5p0 = n_out3p0.x;
	float n_out5p1 = n_out3p0.y;
	float n_out5p2 = n_out3p0.z;

// VectorCompose:6
	float n_in6p1 = 1.00000;
	vec3 n_out6p0 = vec3(n_out5p0, n_in6p1, n_out5p2);

// Output:0
	ALBEDO = n_out6p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -773, 71.75 )
nodes/vertex/0/position = Vector2( 520, 120 )
nodes/vertex/2/node = SubResource( 7 )
nodes/vertex/2/position = Vector2( -780, 60 )
nodes/vertex/4/node = SubResource( 8 )
nodes/vertex/4/position = Vector2( -180, 280 )
nodes/vertex/5/node = SubResource( 9 )
nodes/vertex/5/position = Vector2( -600, 100 )
nodes/vertex/6/node = SubResource( 10 )
nodes/vertex/6/position = Vector2( 280, 100 )
nodes/vertex/7/node = SubResource( 11 )
nodes/vertex/7/position = Vector2( 80, 200 )
nodes/vertex/8/node = SubResource( 12 )
nodes/vertex/8/position = Vector2( -760, 300 )
nodes/vertex/9/node = SubResource( 13 )
nodes/vertex/9/position = Vector2( -360, 260 )
nodes/vertex/10/node = SubResource( 6 )
nodes/vertex/10/position = Vector2( -560, 300 )
nodes/vertex/connections = PoolIntArray( 2, 0, 5, 0, 5, 1, 7, 0, 4, 0, 7, 1, 7, 0, 6, 1, 5, 0, 6, 0, 5, 2, 6, 2, 6, 0, 0, 0, 9, 0, 4, 0, 5, 1, 9, 0, 8, 0, 10, 0, 10, 0, 9, 1 )
nodes/fragment/2/node = SubResource( 1 )
nodes/fragment/2/position = Vector2( -600, 240 )
nodes/fragment/3/node = SubResource( 2 )
nodes/fragment/3/position = Vector2( -340, 140 )
nodes/fragment/4/node = SubResource( 3 )
nodes/fragment/4/position = Vector2( -560, 160 )
nodes/fragment/5/node = SubResource( 4 )
nodes/fragment/5/position = Vector2( -60, 245.75 )
nodes/fragment/6/node = SubResource( 5 )
nodes/fragment/6/position = Vector2( 164, 284.75 )
nodes/fragment/connections = PoolIntArray( 4, 0, 3, 0, 2, 0, 3, 1, 3, 0, 5, 0, 6, 0, 0, 0, 5, 0, 6, 0, 5, 2, 6, 2 )
